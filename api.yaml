components:
  schemas:
    BindTelegramRequest:
      properties:
        telegram_code:
          title: Telegram Code
          type: string
        telegram_id:
          title: Telegram Id
          type: integer
      required:
      - telegram_id
      - telegram_code
      title: BindTelegramRequest
      type: object
    CancelSubscriptionRequest:
      properties:
        cancel_immediately:
          default: false
          title: Cancel Immediately
          type: boolean
      title: CancelSubscriptionRequest
      type: object
    CreateSubscriptionRequest:
      properties:
        plan_id:
          title: Plan Id
          type: string
      required:
      - plan_id
      title: CreateSubscriptionRequest
      type: object
    GenericResponse:
      properties:
        message:
          title: Message
          type: string
      required:
      - message
      title: GenericResponse
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    PaymentCallbackRequest:
      description: Запрос от платежной системы (webhook)
      properties:
        additional_data:
          anyOf:
          - type: object
          - type: 'null'
          title: Additional Data
        payment_id:
          title: Payment Id
          type: string
        signature:
          title: Signature
          type: string
        status:
          title: Status
          type: string
      required:
      - payment_id
      - status
      - signature
      title: PaymentCallbackRequest
      type: object
    PaymentInitiateRequest:
      description: Запрос на инициацию платежа
      properties:
        amount:
          anyOf:
          - exclusiveMinimum: 0.0
            type: number
          - type: string
          title: Amount
        currency:
          maxLength: 3
          minLength: 3
          title: Currency
          type: string
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        order_reference:
          anyOf:
          - type: string
          - type: 'null'
          title: Order Reference
        payment_method:
          title: Payment Method
          type: string
        payment_type:
          anyOf:
          - enum:
            - one_time
            - subscription
            type: string
          - type: 'null'
          default: one_time
          title: Payment Type
        subscription_id:
          anyOf:
          - type: integer
          - type: 'null'
          title: Subscription Id
        user_id:
          anyOf:
          - type: integer
          - type: 'null'
          title: User Id
      required:
      - amount
      - currency
      - payment_method
      title: PaymentInitiateRequest
      type: object
    PaymentInitiateResponse:
      description: Ответ при создании платежа
      properties:
        message:
          title: Message
          type: string
        payment_id:
          title: Payment Id
          type: string
        payment_url:
          anyOf:
          - type: string
          - type: 'null'
          title: Payment Url
      required:
      - payment_id
      - message
      title: PaymentInitiateResponse
      type: object
    PaymentItem:
      description: История платежей
      properties:
        amount:
          description: Сумма платежа
          title: Amount
          type: string
        created_at:
          format: date-time
          title: Created At
          type: string
        currency:
          description: Валюта платежа (например, USD, EUR, RUB)
          maxLength: 3
          minLength: 3
          title: Currency
          type: string
        order_reference:
          anyOf:
          - type: string
          - type: 'null'
          description: Код заказа (если применимо)
          title: Order Reference
        payment_id:
          title: Payment Id
          type: string
        payment_method:
          default: Prodamus
          description: Способ оплаты
          title: Payment Method
          type: string
        payment_status:
          description: Статус платежа
          enum:
          - pending
          - success
          - failed
          title: Payment Status
          type: string
        payment_type:
          default: one_time
          description: Тип платежа
          enum:
          - one_time
          - subscription
          title: Payment Type
          type: string
        subscription_id:
          anyOf:
          - type: integer
          - type: 'null'
          description: ID подписки (если применимо)
          title: Subscription Id
        transaction_id:
          anyOf:
          - type: string
          - type: 'null'
          description: ID транзакции (если есть)
          title: Transaction Id
        user_id:
          description: ID пользователя
          title: User Id
          type: integer
      required:
      - user_id
      - amount
      - currency
      - payment_status
      - payment_id
      - created_at
      title: PaymentItem
      type: object
    PaymentStatusResponse:
      properties:
        id:
          description: Уникальный идентификатор платежа
          title: Id
          type: integer
        payment_id:
          title: Payment Id
          type: string
        payment_status:
          description: 'Статус платежа: success, pending, failed и т.д.'
          title: Payment Status
          type: string
        transaction_id:
          anyOf:
          - type: string
          - type: 'null'
          description: Идентификатор транзакции в платежной системе
          title: Transaction Id
        updated_at:
          description: Время последнего обновления статуса платежа
          format: date-time
          title: Updated At
          type: string
      required:
      - payment_id
      - payment_status
      - id
      - updated_at
      title: PaymentStatusResponse
      type: object
    RefundRequest:
      description: Запрос на возврат платежа
      properties:
        amount:
          anyOf:
          - exclusiveMinimum: 0.0
            type: number
          - type: string
          - type: 'null'
          title: Amount
        payment_id:
          title: Payment Id
          type: string
      required:
      - payment_id
      title: RefundRequest
      type: object
    RefundResponse:
      description: Ответ при возврате платежа
      properties:
        message:
          title: Message
          type: string
        payment_id:
          title: Payment Id
          type: string
        refund_id:
          title: Refund Id
          type: string
        status:
          title: Status
          type: string
      required:
      - payment_id
      - refund_id
      - status
      - message
      title: RefundResponse
      type: object
    RequestLog:
      properties:
        endpoint:
          title: Endpoint
          type: string
        id:
          title: Id
          type: integer
        method:
          title: Method
          type: string
        response_time:
          title: Response Time
          type: number
        status_code:
          title: Status Code
          type: integer
        timestamp:
          format: date-time
          title: Timestamp
          type: string
        user_id:
          anyOf:
          - type: string
          - type: 'null'
          title: User Id
      required:
      - id
      - timestamp
      - endpoint
      - method
      - status_code
      - response_time
      title: RequestLog
      type: object
    RequestMetrics:
      properties:
        average_response_time:
          title: Average Response Time
          type: number
        endpoint:
          title: Endpoint
          type: string
        success_rate:
          title: Success Rate
          type: number
        total_requests:
          title: Total Requests
          type: integer
      required:
      - endpoint
      - total_requests
      - average_response_time
      - success_rate
      title: RequestMetrics
      type: object
    RequestSummary:
      properties:
        average_response_time:
          title: Average Response Time
          type: number
        requests_by_endpoint:
          title: Requests By Endpoint
          type: object
        total_requests:
          title: Total Requests
          type: integer
      required:
      - total_requests
      - average_response_time
      - requests_by_endpoint
      title: RequestSummary
      type: object
    SubscriptionPlan:
      properties:
        currency:
          title: Currency
          type: string
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        name:
          title: Name
          type: string
        period:
          title: Period
          type: string
        plan_id:
          title: Plan Id
          type: string
        price:
          title: Price
          type: number
      required:
      - plan_id
      - name
      - price
      - currency
      - period
      title: SubscriptionPlan
      type: object
    SubscriptionPlanCreate:
      description: Схема валидации входных данных для создания нового тарифного плана
        подписки.
      properties:
        billing_interval:
          description: 'Периодичность оплаты: daily, weekly, monthly, yearly'
          title: Billing Interval
          type: string
        currency:
          description: Валюта подписки (например, RUB, USD, EUR)
          maxLength: 10
          minLength: 3
          title: Currency
          type: string
        description:
          anyOf:
          - type: string
          - type: 'null'
          description: Описание тарифного плана
          title: Description
        external_plan_id:
          anyOf:
          - type: string
          - type: 'null'
          description: Идентификатор плана в платёжной системе (например, Prodamus)
          title: External Plan Id
        name:
          description: Название тарифного плана
          maxLength: 100
          minLength: 3
          title: Name
          type: string
        price:
          description: Стоимость подписки
          exclusiveMinimum: 0.0
          title: Price
          type: number
        trial_period_days:
          anyOf:
          - minimum: 0.0
            type: integer
          - type: 'null'
          default: 0
          description: Количество дней пробного периода
          title: Trial Period Days
      required:
      - name
      - price
      - currency
      - billing_interval
      title: SubscriptionPlanCreate
      type: object
    SubscriptionPlanResponse:
      description: Схема данных, возвращаемых API в ответ на запросы.
      properties:
        billing_interval:
          description: 'Периодичность оплаты: daily, weekly, monthly, yearly'
          title: Billing Interval
          type: string
        created_at:
          format: date-time
          title: Created At
          type: string
        currency:
          description: Валюта подписки (например, RUB, USD, EUR)
          maxLength: 10
          minLength: 3
          title: Currency
          type: string
        description:
          anyOf:
          - type: string
          - type: 'null'
          description: Описание тарифного плана
          title: Description
        external_plan_id:
          anyOf:
          - type: string
          - type: 'null'
          description: Идентификатор плана в платёжной системе (например, Prodamus)
          title: External Plan Id
        id:
          title: Id
          type: integer
        name:
          description: Название тарифного плана
          maxLength: 100
          minLength: 3
          title: Name
          type: string
        price:
          description: Стоимость подписки
          exclusiveMinimum: 0.0
          title: Price
          type: number
        trial_period_days:
          anyOf:
          - minimum: 0.0
            type: integer
          - type: 'null'
          default: 0
          description: Количество дней пробного периода
          title: Trial Period Days
        updated_at:
          format: date-time
          title: Updated At
          type: string
      required:
      - name
      - price
      - currency
      - billing_interval
      - id
      - created_at
      - updated_at
      title: SubscriptionPlanResponse
      type: object
    SubscriptionPlanUpdate:
      description: Схема валидации входных данных для обновления тарифного плана подписки.
      properties:
        billing_interval:
          anyOf:
          - type: string
          - type: 'null'
          description: Периодичность оплаты
          title: Billing Interval
        currency:
          anyOf:
          - maxLength: 10
            minLength: 3
            type: string
          - type: 'null'
          description: Валюта подписки
          title: Currency
        description:
          anyOf:
          - type: string
          - type: 'null'
          description: Описание тарифного плана
          title: Description
        external_plan_id:
          anyOf:
          - type: string
          - type: 'null'
          description: Идентификатор плана в платёжной системе
          title: External Plan Id
        name:
          anyOf:
          - maxLength: 100
            minLength: 3
            type: string
          - type: 'null'
          description: Название тарифного плана
          title: Name
        price:
          anyOf:
          - exclusiveMinimum: 0.0
            type: number
          - type: 'null'
          description: Стоимость подписки
          title: Price
        trial_period_days:
          anyOf:
          - minimum: 0.0
            type: integer
          - type: 'null'
          description: Количество дней пробного периода
          title: Trial Period Days
      title: SubscriptionPlanUpdate
      type: object
    SubscriptionResponse:
      properties:
        end_date:
          anyOf:
          - type: string
          - type: 'null'
          title: End Date
        plan:
          $ref: '#/components/schemas/SubscriptionPlan'
        start_date:
          title: Start Date
          type: string
        status:
          title: Status
          type: string
        subscription_id:
          title: Subscription Id
          type: string
      required:
      - subscription_id
      - plan
      - status
      - start_date
      title: SubscriptionResponse
      type: object
    TelegramCodeResponse:
      properties:
        telegram_code:
          title: Telegram Code
          type: string
      required:
      - telegram_code
      title: TelegramCodeResponse
      type: object
    TelegramRegisterRequest:
      properties:
        auth_date:
          title: Auth Date
          type: integer
        email:
          format: email
          title: Email
          type: string
        first_name:
          title: First Name
          type: string
        last_name:
          title: Last Name
          type: string
        phone:
          title: Phone
          type: string
        photo_url:
          title: Photo Url
          type: string
        telegram_id:
          title: Telegram Id
          type: integer
        username:
          title: Username
          type: string
      required:
      - telegram_id
      - first_name
      - last_name
      - username
      - photo_url
      - auth_date
      - email
      - phone
      title: TelegramRegisterRequest
      type: object
    TelegramUpdate:
      properties:
        callback_query:
          title: Callback Query
          type: object
        message:
          title: Message
          type: object
        update_id:
          title: Update Id
          type: integer
      required:
      - update_id
      title: TelegramUpdate
      type: object
    UpdateSubscriptionRequest:
      properties:
        new_plan_id:
          title: New Plan Id
          type: string
      required:
      - new_plan_id
      title: UpdateSubscriptionRequest
      type: object
    UserInfoResponse:
      properties:
        email:
          format: email
          title: Email
          type: string
        first_name:
          anyOf:
          - type: string
          - type: 'null'
          title: First Name
        last_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Last Name
        phone:
          anyOf:
          - type: string
          - type: 'null'
          title: Phone
        photo_url:
          anyOf:
          - type: string
          - type: 'null'
          title: Photo Url
        telegram_id:
          anyOf:
          - type: integer
          - type: 'null'
          title: Telegram Id
        user_id:
          title: User Id
          type: string
        username:
          anyOf:
          - type: string
          - type: 'null'
          title: Username
      required:
      - user_id
      - email
      - phone
      title: UserInfoResponse
      type: object
    UserResponse:
      description: Схема ответа с данными пользователя (без пароля).
      properties:
        email:
          format: email
          title: Email
          type: string
        name:
          anyOf:
          - maxLength: 255
            type: string
          - type: 'null'
          title: Name
        phone:
          anyOf:
          - type: string
          - type: 'null'
          title: Phone
        user_id:
          title: User Id
          type: string
      required:
      - email
      - user_id
      title: UserResponse
      type: object
    UserUpdate:
      description: Схема для обновления данных пользователя. Все поля опциональны.
      properties:
        email:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
        password:
          anyOf:
          - maxLength: 255
            minLength: 8
            type: string
          - type: 'null'
          title: Password
        phone:
          anyOf:
          - type: string
          - type: 'null'
          title: Phone
      title: UserUpdate
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    OAuth2PasswordBearer:
      flows:
        password:
          scopes: {}
          tokenUrl: auth/token
      type: oauth2
info:
  title: Backend API
  version: '1.0'
openapi: 3.1.0
paths:
  /:
    get:
      operationId: root__get
      responses:
        '200':
          content:
            text/html:
              schema:
                type: string
          description: Successful Response
      summary: Root
  /auth/register/telegram:
    post:
      description: Регистрирует пользователя через Telegram, используя данные, полученные
        от Telegram login widget.
      operationId: handle_tg_registration_auth_register_telegram_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramRegisterRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Регистрация Telegram-пользователя
      tags:
      - auth
  /health/:
    get:
      operationId: health_check_health__get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '404':
          description: Not found
      summary: Health Check
      tags:
      - health
  /openapi.json:
    get:
      operationId: get_openapi_json_openapi_json_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Openapi Json
  /openapi.yaml:
    get:
      operationId: get_openapi_yaml_openapi_yaml_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Openapi Yaml
  /payments/callback:
    post:
      description: Обработчик callback (webhook) от платежного шлюза.
      operationId: payment_callback_payments_callback_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCallbackRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Payment Callback
      tags:
      - payments
  /payments/history:
    get:
      description: Получить историю платежей для текущего пользователя.
      operationId: get_payments_payments_history_get
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PaymentItem'
                title: Response Get Payments Payments History Get
                type: array
          description: Successful Response
        '404':
          description: Not found
      security:
      - OAuth2PasswordBearer: []
      summary: Get Payments
      tags:
      - payments
  /payments/initiate:
    post:
      description: Инициировать новый платёж.
      operationId: initiate_payment_payments_initiate_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentInitiateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInitiateResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Initiate Payment
      tags:
      - payments
  /payments/refund:
    post:
      description: Запросить возврат (refund) по платежу.
      operationId: refund_payment_payments_refund_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Refund Payment
      tags:
      - payments
  /payments/status/{payment_id}:
    get:
      description: Получить статус конкретного платежа по идентификатору.
      operationId: get_payment_status_payments_status__payment_id__get
      parameters:
      - in: path
        name: payment_id
        required: true
        schema:
          title: Payment Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatusResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Payment Status
      tags:
      - payments
  /requests/logs:
    get:
      description: 'Получение логов запросов с возможностью фильтрации по периоду,
        эндпоинту, статусу и пользователю.

        Поддерживается пагинация через параметры limit и offset.'
      operationId: list_request_logs_requests_logs_get
      parameters:
      - description: Начало периода для фильтрации логов
        in: query
        name: start_date
        required: false
        schema:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          description: Начало периода для фильтрации логов
          title: Start Date
      - description: Конец периода для фильтрации логов
        in: query
        name: end_date
        required: false
        schema:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          description: Конец периода для фильтрации логов
          title: End Date
      - description: Фильтр по endpoint
        in: query
        name: endpoint
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Фильтр по endpoint
          title: Endpoint
      - description: Фильтр по статус-коду
        in: query
        name: status_code
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          description: Фильтр по статус-коду
          title: Status Code
      - description: Фильтр по идентификатору пользователя
        in: query
        name: user_id
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          description: Фильтр по идентификатору пользователя
          title: User Id
      - description: Количество записей для возврата
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: Количество записей для возврата
          title: Limit
          type: integer
      - description: Смещение записей для пагинации
        in: query
        name: offset
        required: false
        schema:
          default: 0
          description: Смещение записей для пагинации
          title: Offset
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RequestLog'
                title: Response List Request Logs Requests Logs Get
                type: array
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: List Request Logs
      tags:
      - requests
  /requests/metrics:
    get:
      description: 'Получение агрегированных метрик по каждому эндпоинту.

        Метрики включают общее количество запросов, среднее время ответа и процент
        успешных запросов.'
      operationId: metrics_request_logs_requests_metrics_get
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RequestMetrics'
                title: Response Metrics Request Logs Requests Metrics Get
                type: array
          description: Successful Response
        '404':
          description: Not found
      summary: Metrics Request Logs
      tags:
      - requests
  /requests/summary:
    get:
      description: 'Получение сводной статистики по запросам за указанный период.

        Включает общее количество запросов, среднее время ответа и распределение по
        эндпоинтам.'
      operationId: summary_request_logs_requests_summary_get
      parameters:
      - description: Начало периода для сводной статистики
        in: query
        name: start_date
        required: false
        schema:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          description: Начало периода для сводной статистики
          title: Start Date
      - description: Конец периода для сводной статистики
        in: query
        name: end_date
        required: false
        schema:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          description: Конец периода для сводной статистики
          title: End Date
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestSummary'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Summary Request Logs
      tags:
      - requests
  /subscription-plans/:
    get:
      description: Получить список всех тарифных планов.
      operationId: get_all_plans_subscription_plans__get
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SubscriptionPlanResponse'
                title: Response Get All Plans Subscription Plans  Get
                type: array
          description: Successful Response
        '404':
          description: Not found
      summary: Get All Plans
      tags:
      - Subscription Plans
    post:
      description: Создать новый тарифный план подписки.
      operationId: create_plan_subscription_plans__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionPlanCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionPlanResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create Plan
      tags:
      - Subscription Plans
  /subscription-plans/{plan_id}:
    delete:
      description: Удалить тарифный план по ID.
      operationId: delete_plan_subscription_plans__plan_id__delete
      parameters:
      - in: path
        name: plan_id
        required: true
        schema:
          title: Plan Id
          type: integer
      responses:
        '204':
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Plan
      tags:
      - Subscription Plans
    get:
      description: Получить тарифный план по ID.
      operationId: get_plan_by_id_subscription_plans__plan_id__get
      parameters:
      - in: path
        name: plan_id
        required: true
        schema:
          title: Plan Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionPlanResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Plan By Id
      tags:
      - Subscription Plans
    put:
      description: Обновить существующий тарифный план.
      operationId: update_plan_subscription_plans__plan_id__put
      parameters:
      - in: path
        name: plan_id
        required: true
        schema:
          title: Plan Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionPlanUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionPlanResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Update Plan
      tags:
      - Subscription Plans
  /subscriptions/create:
    post:
      description: 'Создание подписки для текущего пользователя.


        - **plan_id**: идентификатор выбранного тарифного плана


        Здесь может происходить инициирование платежа через модуль payments,

        после успешной оплаты подписка активируется.'
      operationId: create_subscription_subscriptions_create_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Create Subscription
      tags:
      - subscriptions
  /subscriptions/me:
    get:
      description: 'Получение информации о текущей подписке пользователя.


        Возвращает данные подписки, включая тарифный план и статус подписки.'
      operationId: get_my_subscription_subscriptions_me_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Successful Response
        '404':
          description: Not found
      security:
      - OAuth2PasswordBearer: []
      summary: Get My Subscription
      tags:
      - subscriptions
  /subscriptions/plans:
    get:
      description: 'Получение списка доступных тарифных планов для подписок.

        Данный эндпоинт может быть публичным.'
      operationId: list_subscription_plans_subscriptions_plans_get
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SubscriptionPlan'
                title: Response List Subscription Plans Subscriptions Plans Get
                type: array
          description: Successful Response
        '404':
          description: Not found
      summary: List Subscription Plans
      tags:
      - subscriptions
  /subscriptions/{subscription_id}:
    put:
      description: 'Обновление подписки, например, смена тарифного плана.


        - **new_plan_id**: идентификатор нового тарифного плана


        После обновления может потребоваться дополнительная оплата.'
      operationId: update_subscription_subscriptions__subscription_id__put
      parameters:
      - in: path
        name: subscription_id
        required: true
        schema:
          title: Subscription Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubscriptionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Update Subscription
      tags:
      - subscriptions
  /subscriptions/{subscription_id}/cancel:
    post:
      description: 'Отмена активной подписки.


        - **cancel_immediately**: если true, подписка отменяется сразу; иначе — до
        конца оплаченного периода.'
      operationId: cancel_subscription_subscriptions__subscription_id__cancel_post
      parameters:
      - in: path
        name: subscription_id
        required: true
        schema:
          title: Subscription Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelSubscriptionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Cancel Subscription
      tags:
      - subscriptions
  /tg/test:
    get:
      description: Тестовый эндпоинт для проверки работы маршрута Telegram.
      operationId: test_endpoint_tg_test_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '404':
          description: Not found
      summary: Test Endpoint
      tags:
      - telegram
  /tg/webhook:
    post:
      description: 'Обработчик webhook для Telegram.


        Принимает обновления от Telegram Bot API в формате JSON.

        Обновление может содержать сообщение, callback_query или другой тип данных.


        Логика обработки обновлений:

        - Если получено сообщение с командой /bind, можно инициировать процесс привязки
        (или передать в user-сервис).

        - Если получено сообщение для проверки оплаты/тарифа, делегировать соответствующую
        логику.

        - Для остальных случаев – логирование и выполнение базовой обработки.


        В этом эндпоинте рекомендуется минимальная бизнес-логика – основной функционал
        должен делегироваться в соответствующий сервисный слой (например, `telegram_service`).'
      operationId: telegram_webhook_tg_webhook_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Telegram Webhook
      tags:
      - telegram
  /users/me:
    get:
      description: 'Получение информации о текущем пользователе.


        Возвращает расширенную информацию о текущем пользователе, включая:

        - `id`: Идентификатор пользователя.

        - `email`: Электронная почта пользователя.

        - `phone`: Телефон пользователя.

        - `telegram_id`: ID привязанного Telegram-аккаунта (если есть).


        **Ответы:**

        - 200 OK: Если пользователь найден, возвращаются его данные.

        - 401 Unauthorized: Если пользователь не аутентифицирован.

        - 500 Internal Server Error: Если произошла ошибка при получении данных пользователя.'
      operationId: get_user_info_me_users_me_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
          description: Successful Response
        '404':
          description: Not found
      security:
      - OAuth2PasswordBearer: []
      summary: Get User Info Me
      tags:
      - users
  /users/{user_id}:
    delete:
      description: 'Удаление пользователя по его ID.


        - **user_id**: Уникальный идентификатор пользователя.


        **Ответы:**

        - 200 OK: Если пользователь успешно удален.

        - 404 Not Found: Если пользователь с указанным ID не найден.

        - 500 Internal Server Error: Если произошла ошибка при удалении пользователя.'
      operationId: delete_user_account_users__user_id__delete
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete User Account
      tags:
      - users
    get:
      description: 'Получение информации о пользователе по его ID.


        - **user_id**: Уникальный идентификатор пользователя в системе.


        Возвращает информацию о пользователе, включая:

        - `id`: Идентификатор пользователя.

        - `email`: Электронная почта пользователя.

        - `phone`: Телефон пользователя.


        **Ответы:**

        - 200 OK: Если пользователь найден, возвращаются его данные.

        - 404 Not Found: Если пользователь с указанным ID не найден.

        - 500 Internal Server Error: Если произошла ошибка при запросе данных пользователя.'
      operationId: get_user_users__user_id__get
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get User
      tags:
      - users
    put:
      description: "Обновление данных пользователя по его ID.\n\n- **user_id**: Уникальный\
        \ идентификатор пользователя в системе.\n- **user_update**: Объект, содержащий\
        \ данные для обновления пользователя, включая:\n    - `email`: Новая электронная\
        \ почта пользователя.\n    - `phone`: Новый телефон пользователя.\n\n**Ответы:**\n\
        - 200 OK: Если данные пользователя успешно обновлены, возвращаются обновленные\
        \ данные пользователя.\n- 404 Not Found: Если пользователь с указанным ID\
        \ не найден.\n- 400 Bad Request: Если в запросе отсутствуют обязательные поля\
        \ или они неверного формата.\n- 500 Internal Server Error: Если произошла\
        \ ошибка при обновлении данных пользователя.\n\n**Пример успешного ответа:**\n\
        ```json\n{\n  \"id\": 1,\n  \"email\": \"updateduser@example.com\",\n  \"\
        phone\": \"987654321\"\n}\n```\n\n**Пример ошибки 404 (пользователь не найден):**\n\
        ```json\n{\n  \"detail\": \"User with this ID not found.\"\n}\n```\n\n**Пример\
        \ ошибки 400 (неправильные данные):**\n```json\n{\n  \"detail\": \"Invalid\
        \ email format.\"\n}\n```\n\n**Пример ошибки 500 (технический сбой):**\n```json\n\
        {\n  \"detail\": \"An error occurred while updating the user: [описание ошибки]\"\
        \n}"
      operationId: update_user_data_users__user_id__put
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Update User Data
      tags:
      - users
  /users/{user_id}/info:
    get:
      description: 'Получение расширенной информации о пользователе, включая данные
        Telegram.


        - **user_id**: Уникальный идентификатор пользователя в системе.


        **Возвращает:**

        - `id`: Идентификатор пользователя.

        - `email`: Электронная почта пользователя.

        - `phone`: Телефон пользователя.

        - `telegram_id`: Идентификатор Telegram (если привязан).


        **Ответы:**

        - 200 OK: Если пользователь найден, возвращаются его данные.

        - 404 Not Found: Если пользователь с указанным ID не найден.

        - 500 Internal Server Error: Если произошла ошибка при запросе данных пользователя.'
      operationId: get_extended_user_info_users__user_id__info_get
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Extended User Info
      tags:
      - users
  /users/{user_id}/telegram/bind:
    post:
      description: 'Привязка Telegram к аккаунту пользователя.


        - **user_id**: Уникальный идентификатор пользователя.

        - **telegram_id**: Идентификатор Telegram-аккаунта.

        - **telegram_code**: Код подтверждения для привязки.


        Привязывает Telegram к аккаунту пользователя.


        **Ответы:**

        - 200 OK: Telegram успешно привязан.

        - 400 Bad Request: Код привязки недействителен или устарел.

        - 404 Not Found: Пользователь не найден.

        - 500 Internal Server Error: Ошибка на сервере при привязке Telegram.'
      operationId: bind_telegram_users__user_id__telegram_bind_post
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BindTelegramRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Bind Telegram
      tags:
      - users
  /users/{user_id}/telegram/request_code:
    post:
      description: 'Запрос кода для привязки Telegram к аккаунту пользователя.


        - **user_id**: Уникальный идентификатор пользователя.


        Возвращает сгенерированный код, который используется для привязки аккаунта
        Telegram.


        **Ответы:**

        - 200 OK: Код успешно сгенерирован.

        - 404 Not Found: Если пользователь с указанным ID не найден.

        - 500 Internal Server Error: В случае технической ошибки при генерации кода.'
      operationId: request_telegram_code_users__user_id__telegram_request_code_post
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramCodeResponse'
          description: Successful Response
        '404':
          description: Not found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Request Telegram Code
      tags:
      - users
